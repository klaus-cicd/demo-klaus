# 指定kafka server的地址，集群配多个，中间，逗号隔开
spring:
  kafka:
    bootstrap-servers: 127.0.0.1:19092,127.0.0.1:29092,127.0.0.1:39092
    # 生产者
    producer:
      #重试次数
      retries: 3
      # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      acks: 1
      # 32MB的批处理缓冲区 32*1024*1024 (byte)
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 提交延时
      # 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
      # linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
      properties:
        linger.ms: 0
        # 自定义分区器
        #partitioner.class: com.felix.kafka.producer.CustomizePartitioner
      #批量发送的消息数量
      batch-size: 1000
    # 消费者
    consumer:
      # 默认消费者组
      group-id: crm-user-service
      # 最早未被消费的offset
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: earliest
      # 是否自动提交offset
      enable-auto-commit: false
      # 自动提交时间间隔，单位ms
      auto-commit-interval: 1000
      properties:
        # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        session.timeout.ms: 120000
        request.timeout.ms: 180000
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #批消费并发量，小于或等于Topic的分区数
      batch:
        concurrency: 3
      # 批量一次最大拉取数据量(结合下面listener.type配置)
      max-poll-records: 4000
    listener:
      # 消费端监听的topic不存在时，项目启动会报错(关掉)
      missing-topics-fatal: false
      # 设置批量消费
      type: batch
